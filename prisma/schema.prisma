// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  nome                String?
  password            String?
  cnpj                String?
  fantasia            String?
  logradouro          String?
  numero              String?
  complemento         String?
  municipio           String?
  bairro              String?
  uf                  String?
  cep                 String?
  email               String?
  telefone            String?
  abertura            String?
  situacao            String?
  tipo                String?
  capital_social      String?
  natureza_juridica   String?
  atividade_principal Json[]
  atividades_secundarias Json[]
  qsa Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// model Customer {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   name    String?
//   cnpj    String?
//   email   String?   @unique
//   role    Role     @default(USER)
//   posts   Post[]
//   profile Profile?
// }

// model Profile {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   bio    String
//   user   Customer   @relation(fields: [userId], references: [id])
//   userId String @unique @db.ObjectId
// }

// model Post {
//   id          String     @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt   DateTime   @default(now())
//   title       String
//   published   Boolean    @default(false)
//   author      Customer       @relation(fields: [authorId], references: [id])
//   authorId    String     @db.ObjectId
//   categoryIDs String[]   @db.ObjectId
//   categories  Category[] @relation(fields: [categoryIDs], references: [id])
// }

// model Category {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   name    String
//   postIDs String[] @db.ObjectId
//   posts   Post[]   @relation(fields: [postIDs], references: [id])
// }

// enum Role {
//   USER
//   ADMIN
// }

model Token {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  token               String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Unique{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  cnpj String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



